unit uNotaPagamento;

interface

uses Windows, TLHelp32, Forms, Controls, DateUtils, WinInet, MaskUtils, StdCtrls, Variants, DbTables, SysUtils, Classes, Contnrs, FireDAC.Stan.Intf, FireDAC.Stan.Option,
     FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
     Datasnap.DBClient, FireDAC.UI.Intf, FireDAC.VCLUI.Wait, FireDAC.Comp.UI;

type
  TNotaPagamento = class
  private
    SQLConnection      		   : TFDConnection;
    FIdNotaPagamento: Integer;
    FIdEmpresa: Integer;
    FIdUsuario: Integer;
    FDtCadastro: TDateTime;
    FSnSituacao: Integer;
    FIdNota: Integer;
    FIdTpPagamento: Integer;
    FQtdNotaPagamento: Integer;
    FVlPagamento: Extended;
    procedure Inicializar;
  public
    property IdNotaPagamento: Integer read FIdNotaPagamento write FIdNotaPagamento;
    property IdEmpresa: Integer read FIdEmpresa write FIdEmpresa;
    property IdUsuario: Integer read FIdUsuario write FIdUsuario;
    property DtCadastro: TDateTime read FDtCadastro write FDtCadastro;
    property SnSituacao: Integer read FSnSituacao write FSnSituacao;
    property IdNota: Integer read FIdNota write FIdNota;
    property IdTpPagamento: Integer read FIdTpPagamento write FIdTpPagamento;
    property QtdNotaPagamento: Integer read FQtdNotaPagamento write FQtdNotaPagamento;
    property VlPagamento: Extended read FVlPagamento write FVlPagamento;
    constructor Create;
    function Salvar(ASQLConnection: TFDConnection): Boolean;
    class function Inativar(ASQLConnection: TFDConnection; AIdNotaPagamento: Integer;AIdEmpresa: Integer; AIdNota: Integer; AIdTpPagamento: Integer): Boolean;
    class function Existe(ASQLConnection: TFDConnection; AIdNotaPagamento: Integer; AIdEmpresa: Integer; AIdNota: Integer; AIdTpPagamento: Integer): Boolean;
    function Buscar(ASQLConnection: TFDConnection; AIdNotaPagamento: Integer; AIdEmpresa: Integer; AIdNota: Integer; AIdTpPagamento: Integer): Boolean;
    class function BuscaMaxId(ASQLConnection: TFDConnection): Integer;
    procedure CarregaDbGrid(ASQLConnection: TFDConnection; ISnSituacao: Integer; AIdNotaPagamento: Integer; AIdEmpresa: Integer; AIdNota: Integer; AIdTpPagamento: Integer; AConsulta: String; Data: TClientDataSet);
  end;

implementation

uses uFuncao, dPrincipal, uMensagem, uLog, uProcedure, dRelatorios, fProcessando;

procedure TNotaPagamento.CarregaDbGrid(ASQLConnection: TFDConnection; ISnSituacao: Integer; AIdNotaPagamento: Integer;  AIdEmpresa: Integer; AIdNota: Integer; AIdTpPagamento: Integer; AConsulta: String; Data: TClientDataSet);
var
  qryNotaPagamento : TFDQuery;
  I            : Integer;
  lCampo       : TField;
  lCondicao    : String;
  lVerificacao : Integer;
  lFinalizaLoop: Integer;
begin
  lVerificacao := 0;
  lFinalizaLoop:= 0;

  qryNotaPagamento := TFDQuery.Create(nil);
  try
    qryNotaPagamento.Connection := ASQLConnection;

    if Data.FieldCount = 0 then
    begin
      Data.FieldDefs.Add('IdNotaPagamento', ftInteger);
      Data.FieldDefs.Add('IdEmpresa', ftInteger);
      Data.FieldDefs.Add('IdUsuario', ftInteger);
      Data.FieldDefs.Add('DtCadastro', ftDateTime);
      Data.FieldDefs.Add('SnSituacao', ftString, 7, False);
      Data.FieldDefs.Add('IdNota', ftInteger);
      Data.FieldDefs.Add('IdTpPagamento', ftInteger);
      Data.FieldDefs.Add('QtdNotaPagamento', ftInteger);
      Data.FieldDefs.Add('VlPagamento', ftCurrency);
      Data.CreateDataSet;
    end;

    Data.EmptyDataSet;
    Data.DisableControls;

    for I := 0 to Data.FieldCount -1 do
    begin
      lCampo := Data.Fields[I];

      qryNotaPagamento.Params.Clear;
      qryNotaPagamento.SQL.Clear;
      qryNotaPagamento.SQL.Add('Select');
      qryNotaPagamento.SQL.Add('  IdNotaPagamento,');
      qryNotaPagamento.SQL.Add('  IdEmpresa,');
      qryNotaPagamento.SQL.Add('  IdUsuario,');
      qryNotaPagamento.SQL.Add('  DtCadastro,');
      qryNotaPagamento.SQL.Add('  SnSituacao,');
      qryNotaPagamento.SQL.Add('  IdNota,');
      qryNotaPagamento.SQL.Add('  IdTpPagamento,');
      qryNotaPagamento.SQL.Add('  QtdNotaPagamento,');
      qryNotaPagamento.SQL.Add('  VlPagamento');
      qryNotaPagamento.SQL.Add('From NotaPagamento');
      qryNotaPagamento.SQL.Add('Where 1 = 1');
      if ISnSituacao = 1 then
      begin
         qryNotaPagamento.SQL.Add('  And SnSituacao = 1');
      end
      else
      if ISnSituacao = 0 then
      begin
         qryNotaPagamento.SQL.Add('  And SnSituacao = 0');
      end;

      if Trim(AConsulta) <> '' then
      begin
        if PermitePesquisa(lCampo, AConsulta) then
        begin
          if lCampo.DataType in [ftString] then
          begin
            lCondicao := ' And ' + lCampo.FieldName + ' Like ' + QuotedStr('%' + AConsulta + '%');
          end else if lCampo.DataType in [ftInteger] then
          begin
            lCondicao := ' And ' + lCampo.FieldName + ' = ' + AConsulta;
          end;
          qryNotaPagamento.SQL.Add (lCondicao);
          qryNotaPagamento.SQL.Add ('Order By');
          qryNotaPagamento.SQL.Add ('  IdNotaPagamento');

          qryNotaPagamento.Open;
          qryNotaPagamento.First;
        end;
      end else begin
        qryNotaPagamento.SQL.Add (lCondicao);
        qryNotaPagamento.SQL.Add ('Order By');
        qryNotaPagamento.SQL.Add ('  IdNotaPagamento');

        lFinalizaLoop := 1;
        qryNotaPagamento.Open;
        qryNotaPagamento.First;
      end;

      while not qryNotaPagamento.Eof do
      begin
        if Trim(AConsulta) <> '' then
        begin
          if not Data.IsEmpty then
          begin
            Data.First;
            while not Data.Eof do
            begin
              if Data.FieldByName('IdNotaPagamento').AsInteger = qryNotaPagamento.FieldByName('IdNotaPagamento').AsInteger then
              begin
                lVerificacao := 1;
              end;
              Data.Next
            end;
          end;
        end;
        if lVerificacao = 0 then
        begin
          Data.Append;
          Data.FieldByName('IdNotaPagamento').AsInteger := qryNotaPagamento.FieldByName('IdNotaPagamento').AsInteger;
          Data.FieldByName('IdEmpresa').AsInteger := qryNotaPagamento.FieldByName('IdEmpresa').AsInteger;
          Data.FieldByName('IdUsuario').AsInteger := qryNotaPagamento.FieldByName('IdUsuario').AsInteger;
          Data.FieldByName('DtCadastro').AsDateTime := qryNotaPagamento.FieldByName('DtCadastro').AsDateTime;
          if qryNotaPagamento.FieldByName('SnSituacao').AsBoolean then
          begin
            Data.FieldByName('SnSituacao').AsString  := 'Ativo';
          end else begin
            Data.FieldByName('SnSituacao').AsString  := 'Desativado';
          end;
          Data.FieldByName('IdNota').AsInteger := qryNotaPagamento.FieldByName('IdNota').AsInteger;
          Data.FieldByName('IdTpPagamento').AsInteger := qryNotaPagamento.FieldByName('IdTpPagamento').AsInteger;
          Data.FieldByName('QtdNotaPagamento').AsInteger := qryNotaPagamento.FieldByName('QtdNotaPagamento').AsInteger;
          Data.FieldByName('VlPagamento').AsFloat := qryNotaPagamento.FieldByName('VlPagamento').AsFloat;
          Data.Post;
        end;

        lVerificacao := 0;
        qryNotaPagamento.Next;
      end;
      if lFinalizaLoop = 1 then
      begin
        Break;
      end;
    end;
  finally
    qryNotaPagamento.FreeOnRelease;
    Data.EnableControls;
    Data.First;
  end;
end;

constructor TNotaPagamento.Create;
begin
  Inicializar;
end;

procedure TNotaPagamento.Inicializar;
begin
  IdNotaPagamento := 0;
  IdEmpresa := 0;
  IdUsuario := 0;
  DtCadastro := 0;
  SnSituacao := 0;
  IdNota := 0;
  IdTpPagamento := 0;
  QtdNotaPagamento := 0;
  VlPagamento := 0;
end;

function TNotaPagamento.Salvar(ASQLConnection: TFDConnection): Boolean;
var
 qryNotaPagamento: TFDQuery;
begin
  qryNotaPagamento:= TFDQuery.Create(Nil);
  try
    qryNotaPagamento.Connection := ASQLConnection;
    if not Existe(ASQLConnection, IdNotaPagamento, IdEmpresa, IdNota, IdTpPagamento) then
    begin
      qryNotaPagamento.SQL.Add('Insert Into NotaPagamento(');
      qryNotaPagamento.SQL.Add('  IdEmpresa,');
      qryNotaPagamento.SQL.Add('  IdUsuario,');
      qryNotaPagamento.SQL.Add('  DtCadastro,');
      qryNotaPagamento.SQL.Add('  SnSituacao,');
      qryNotaPagamento.SQL.Add('  IdNota,');
      qryNotaPagamento.SQL.Add('  IdTpPagamento,');
      qryNotaPagamento.SQL.Add('  QtdNotaPagamento,');
      qryNotaPagamento.SQL.Add('  VlPagamento)');
      qryNotaPagamento.SQL.Add('Values (');
      qryNotaPagamento.SQL.Add('  :IdEmpresa,');
      qryNotaPagamento.SQL.Add('  :IdUsuario,');
      qryNotaPagamento.SQL.Add('  :DtCadastro,');
      qryNotaPagamento.SQL.Add('  :SnSituacao,');
      qryNotaPagamento.SQL.Add('  :IdNota,');
      qryNotaPagamento.SQL.Add('  :IdTpPagamento,');
      qryNotaPagamento.SQL.Add('  :QtdNotaPagamento,');
      qryNotaPagamento.SQL.Add('  :VlPagamento)');

      qryNotaPagamento.ParamByName('IdEmpresa').AsInteger := IdEmpresa;
      qryNotaPagamento.ParamByName('IdUsuario').AsInteger := IdUsuario;
      qryNotaPagamento.ParamByName('DtCadastro').AsDateTime := DtCadastro;

    end else begin
      qryNotaPagamento.SQL.Add('Update NotaPagamento Set ');
      qryNotaPagamento.SQL.Add('  SnSituacao = :SnSituacao,');
      qryNotaPagamento.SQL.Add('  QtdNotaPagamento = :QtdNotaPagamento,');
      qryNotaPagamento.SQL.Add('  VlPagamento = :VlPagamento ');
      qryNotaPagamento.SQL.Add('Where IdNotaPagamento = :IdNotaPagamento');
      qryNotaPagamento.SQL.Add('  And IdEmpresa = :IdEmpresa');
      qryNotaPagamento.SQL.Add('  And IdNota = :IdNota');
      qryNotaPagamento.SQL.Add('  And IdTpPagamento = :IdTpPagamento');

      qryNotaPagamento.ParamByName('IdNotaPagamento').AsInteger := IdNotaPagamento;


      qryNotaPagamento.ParamByName('IdNotaPagamento').AsInteger := IdNotaPagamento;


      qryNotaPagamento.ParamByName('IdNotaPagamento').AsInteger := IdNotaPagamento;

; 
      qryNotaPagamento.ParamByName('IdNotaPagamento').AsInteger := IdNotaPagamento;

    end;
    qryNotaPagamento.ParamByName('SnSituacao').AsInteger := SnSituacao;
    qryNotaPagamento.ParamByName('IdNota').AsInteger := IdNota;
    qryNotaPagamento.ParamByName('IdTpPagamento').AsInteger := IdTpPagamento;
    qryNotaPagamento.ParamByName('QtdNotaPagamento').AsInteger := QtdNotaPagamento;
    qryNotaPagamento.ParamByName('VlPagamento').AsFloat := VlPagamento;
   try
      qryNotaPagamento.ExecSQL;
      qryNotaPagamento.Close;
      Result := True;
    except
      Result := False;
    end;
  finally
    FreeAndNil(qryNotaPagamento)
  end;
end;

class function TNotaPagamento.Inativar(ASQLConnection: TFDConnection; AIdNotaPagamento: Integer; AIdEmpresa: Integer; AIdNota: Integer; AIdTpPagamento: Integer): Boolean;
var
  qryNotaPagamento: TFDQuery;
begin
  qryNotaPagamento:= TFDQuery.Create(Nil);
  try
    qryNotaPagamento.Connection := ASQLConnection;
    qryNotaPagamento.SQL.Add('Update NotaPagamento Set ');
    qryNotaPagamento.SQL.Add('  SnSituacao = 0 ');
    qryNotaPagamento.SQL.Add('Where 1 = 1');
    qryNotaPagamento.SQL.Add('  And IdNotaPagamento = ' + IntToStr(AIdNotaPagamento));
    qryNotaPagamento.SQL.Add('  And IdEmpresa = ' + IntToStr(AIdEmpresa));
    qryNotaPagamento.SQL.Add('  And IdNota = ' + IntToStr(AIdNota));
    qryNotaPagamento.SQL.Add('  And IdTpPagamento = ' + IntToStr(AIdTpPagamento));
   try
      qryNotaPagamento.ExecSQL;
      qryNotaPagamento.Close;
      Result := True;
    except
      Result := False;
    end;
  finally
    FreeAndNil(qryNotaPagamento)
  end;
end;

class function TNotaPagamento.Existe(ASQLConnection: TFDConnection; AIdNotaPagamento: Integer; AIdEmpresa: Integer; AIdNota: Integer; AIdTpPagamento: Integer): Boolean;
var
  qryNotaPagamento: TFDQuery;
begin
  Result := False;
  qryNotaPagamento:= TFDQuery.Create(Nil);
  try
    qryNotaPagamento.Connection := ASQLConnection;
    qryNotaPagamento.SQL.Add('Select IdNotaPagamento From NotaPagamento');
    qryNotaPagamento.SQL.Add('Where 1 = 1');
    qryNotaPagamento.SQL.Add('  And IdNotaPagamento = ' + IntToStr(AIdNotaPagamento));
    qryNotaPagamento.SQL.Add('  And IdEmpresa = ' + IntToStr(AIdEmpresa));
    qryNotaPagamento.SQL.Add('  And IdNota = ' + IntToStr(AIdNota));
    qryNotaPagamento.SQL.Add('  And IdTpPagamento = ' + IntToStr(AIdTpPagamento));
    qryNotaPagamento.Open;
    if qryNotaPagamento.Fields[0].Value > 0 then
      Result := True;
    qryNotaPagamento.Close;
  finally
    FreeAndNil(qryNotaPagamento)
  end;
end;

class function TNotaPagamento.BuscaMaxId(ASQLConnection: TFDConnection): Integer;
var
  qryNotaPagamento: TFDQuery;
begin
  Result := 0;
  qryNotaPagamento:= TFDQuery.Create(Nil);
  try
    qryNotaPagamento.Connection := ASQLConnection;
    qryNotaPagamento.SQL.Add('Select Max(IdNotaPagamento) As IdNotaPagamento From NotaPagamento');
    qryNotaPagamento.Open;

    if qryNotaPagamento.FieldByName('IdNotaPagamento').AsInteger > 0 then
      Result := qryNotaPagamento.FieldByName('IdNotaPagamento').AsInteger;
    qryNotaPagamento.Close;
  finally
    FreeAndNil(qryNotaPagamento)
  end;
end;

function TNotaPagamento.Buscar(ASQLConnection: TFDConnection; AIdNotaPagamento: Integer; AIdEmpresa: Integer; AIdNota: Integer; AIdTpPagamento: Integer): Boolean;
var
  qryNotaPagamento: TFDQuery;
begin
  Result := False;
  qryNotaPagamento:= TFDQuery.Create(Nil);
  try
    qryNotaPagamento.Connection := ASQLConnection;
    qryNotaPagamento.SQL.Add('Select * From NotaPagamento');
    qryNotaPagamento.SQL.Add('Where 1 = 1');
    if AIdEmpresa > 0 then
    begin
      qryNotaPagamento.SQL.Add('  And IdNotaPagamento = ' + IntToStr(AIdNotaPagamento));
      qryNotaPagamento.SQL.Add('  And IdEmpresa = ' + IntToStr(AIdEmpresa));
      qryNotaPagamento.SQL.Add('  And IdNota = ' + IntToStr(AIdNota));
      qryNotaPagamento.SQL.Add('  And IdTpPagamento = ' + IntToStr(AIdTpPagamento));
    end;

    qryNotaPagamento.Open;
    if not qryNotaPagamento.IsEmpty then
    begin
      Result := True;
      IdNotaPagamento := qryNotaPagamento.FieldByName('IdNotaPagamento').AsInteger;
      IdEmpresa := qryNotaPagamento.FieldByName('IdEmpresa').AsInteger;
      IdUsuario := qryNotaPagamento.FieldByName('IdUsuario').AsInteger;
      DtCadastro := qryNotaPagamento.FieldByName('DtCadastro').AsDateTime;
      if qryNotaPagamento.FieldByName('SnSituacao').AsBoolean then
      begin
        SnSituacao := 1
      end else begin
        SnSituacao := 0
      end;
      IdNota := qryNotaPagamento.FieldByName('IdNota').AsInteger;
      IdTpPagamento := qryNotaPagamento.FieldByName('IdTpPagamento').AsInteger;
      QtdNotaPagamento := qryNotaPagamento.FieldByName('QtdNotaPagamento').AsInteger;
      VlPagamento := qryNotaPagamento.FieldByName('VlPagamento').AsFloat;
    end;
    qryNotaPagamento.Close;
  finally
    FreeAndNil(qryNotaPagamento)
  end;
end;

end.

