unit uMarca;

interface

uses Windows, TLHelp32, Forms, Controls, DateUtils, WinInet, MaskUtils, StdCtrls, Variants, DbTables, SysUtils, Classes, Contnrs, FireDAC.Stan.Intf, FireDAC.Stan.Option,
     FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
     Datasnap.DBClient, FireDAC.UI.Intf, FireDAC.VCLUI.Wait, FireDAC.Comp.UI;

type
  TMarca = class
  private
    SQLConnection      		   : TFDConnection;
    FIdMarca: Integer;
    FIdUsuario: Integer;
    FDtCadastro: TDateTime;
    FSnSituacao: Integer;
    FNmMarca: String;
    procedure Inicializar;
  public
    property IdMarca: Integer read FIdMarca write FIdMarca;
    property IdUsuario: Integer read FIdUsuario write FIdUsuario;
    property DtCadastro: TDateTime read FDtCadastro write FDtCadastro;
    property SnSituacao: Integer read FSnSituacao write FSnSituacao;
    property NmMarca: String read FNmMarca write FNmMarca;
    constructor Create;
    function Salvar(ASQLConnection: TFDConnection): Boolean;
    class function Inativar(ASQLConnection: TFDConnection; AIdMarca: Integer): Boolean;
    class function Existe(ASQLConnection: TFDConnection; AIdMarca: Integer): Boolean;
    function Buscar(ASQLConnection: TFDConnection; AIdMarca: Integer): Boolean;
    class function BuscaMaxId(ASQLConnection: TFDConnection): Integer;
    procedure CarregaDbGrid(ASQLConnection: TFDConnection; ISnSituacao: Integer; AIdMarca: Integer; AConsulta: String; Data: TClientDataSet);
  end;

implementation

uses uFuncao, dPrincipal, uMensagem, uLog, uProcedure, dRelatorios, fProcessando;

procedure TMarca.CarregaDbGrid(ASQLConnection: TFDConnection; ISnSituacao: Integer; AIdMarca: Integer; AConsulta: String; Data: TClientDataSet);
var
  qryMarca : TFDQuery;
  I            : Integer;
  lCampo       : TField;
  lCondicao    : String;
  lVerificacao : Integer;
  lFinalizaLoop: Integer;
begin
  lVerificacao := 0;
  lFinalizaLoop:= 0;

  qryMarca := TFDQuery.Create(nil);
  try
    qryMarca.Connection := ASQLConnection;

    if Data.FieldCount = 0 then
    begin
      Data.FieldDefs.Add('IdMarca', ftInteger);
      Data.FieldDefs.Add('IdUsuario', ftInteger);
      Data.FieldDefs.Add('DtCadastro', ftDateTime);
      Data.FieldDefs.Add('SnSituacao', ftString, 7, False);
      Data.FieldDefs.Add('NmMarca', ftString, 10, False);
      Data.CreateDataSet;
    end;

    Data.EmptyDataSet;
    Data.DisableControls;

    for I := 0 to Data.FieldCount -1 do
    begin
      lCampo := Data.Fields[I];

      qryMarca.Params.Clear;
      qryMarca.SQL.Clear;
      qryMarca.SQL.Add('Select');
      qryMarca.SQL.Add('  IdMarca,');
      qryMarca.SQL.Add('  IdUsuario,');
      qryMarca.SQL.Add('  DtCadastro,');
      qryMarca.SQL.Add('  SnSituacao,');
      qryMarca.SQL.Add('  NmMarca');
      qryMarca.SQL.Add('From Marca');
      qryMarca.SQL.Add('Where 1 = 1');
      if ISnSituacao = 1 then
      begin
         qryMarca.SQL.Add('  And SnSituacao = 1');
      end
      else
      if ISnSituacao = 0 then
      begin
         qryMarca.SQL.Add('  And SnSituacao = 0');
      end;

      if Trim(AConsulta) <> '' then
      begin
        if PermitePesquisa(lCampo, AConsulta) then
        begin
          if lCampo.DataType in [ftString] then
          begin
            lCondicao := ' And ' + lCampo.FieldName + ' Like ' + QuotedStr('%' + AConsulta + '%');
          end else if lCampo.DataType in [ftInteger] then
          begin
            lCondicao := ' And ' + lCampo.FieldName + ' = ' + AConsulta;
          end;
          qryMarca.SQL.Add (lCondicao);
          qryMarca.SQL.Add ('Order By');
          qryMarca.SQL.Add ('  IdMarca');

          qryMarca.Open;
          qryMarca.First;
        end;
      end else begin
        qryMarca.SQL.Add (lCondicao);
        qryMarca.SQL.Add ('Order By');
        qryMarca.SQL.Add ('  IdMarca');

        lFinalizaLoop := 1;
        qryMarca.Open;
        qryMarca.First;
      end;

      while not qryMarca.Eof do
      begin
        if Trim(AConsulta) <> '' then
        begin
          if not Data.IsEmpty then
          begin
            Data.First;
            while not Data.Eof do
            begin
              if Data.FieldByName('IdMarca').AsInteger = qryMarca.FieldByName('IdMarca').AsInteger then
              begin
                lVerificacao := 1;
              end;
              Data.Next
            end;
          end;
        end;
        if lVerificacao = 0 then
        begin
          Data.Append;
          Data.FieldByName('IdMarca').AsInteger := qryMarca.FieldByName('IdMarca').AsInteger;
          Data.FieldByName('IdUsuario').AsInteger := qryMarca.FieldByName('IdUsuario').AsInteger;
          Data.FieldByName('DtCadastro').AsDateTime := qryMarca.FieldByName('DtCadastro').AsDateTime;
          if qryMarca.FieldByName('SnSituacao').AsBoolean then
          begin
            Data.FieldByName('SnSituacao').AsString  := 'Ativo';
          end else begin
            Data.FieldByName('SnSituacao').AsString  := 'Desativado';
          end;
          Data.FieldByName('NmMarca').AsString := qryMarca.FieldByName('NmMarca').AsString;
          Data.Post;
        end;

        lVerificacao := 0;
        qryMarca.Next;
      end;
      if lFinalizaLoop = 1 then
      begin
        Break;
      end;
    end;
  finally
    qryMarca.FreeOnRelease;
    Data.EnableControls;
    Data.First;
  end;
end;

constructor TMarca.Create;
begin
  Inicializar;
end;

procedure TMarca.Inicializar;
begin
  IdMarca := 0;
  IdUsuario := 0;
  DtCadastro := 0;
  SnSituacao := 0;
  NmMarca := '';
end;

function TMarca.Salvar(ASQLConnection: TFDConnection): Boolean;
var
 qryMarca: TFDQuery;
begin
  qryMarca:= TFDQuery.Create(Nil);
  try
    qryMarca.Connection := ASQLConnection;
    if not Existe(ASQLConnection, IdMarca) then
    begin
      qryMarca.SQL.Add('Insert Into Marca(');
      qryMarca.SQL.Add('  IdUsuario,');
      qryMarca.SQL.Add('  DtCadastro,');
      qryMarca.SQL.Add('  SnSituacao,');
      qryMarca.SQL.Add('  NmMarca)');
      qryMarca.SQL.Add('Values (');
      qryMarca.SQL.Add('  :IdUsuario,');
      qryMarca.SQL.Add('  :DtCadastro,');
      qryMarca.SQL.Add('  :SnSituacao,');
      qryMarca.SQL.Add('  :NmMarca)');
    end else begin
      qryMarca.SQL.Add('Update Marca Set ');
      qryMarca.SQL.Add('  IdUsuario = :IdUsuario,');
      qryMarca.SQL.Add('  DtCadastro = :DtCadastro,');
      qryMarca.SQL.Add('  SnSituacao = :SnSituacao,');
      qryMarca.SQL.Add('  NmMarca = :NmMarca ');
      qryMarca.SQL.Add('Where IdMarca = :IdMarca');

      qryMarca.ParamByName('IdMarca').AsInteger := IdMarca;

    end;
    qryMarca.ParamByName('IdUsuario').AsInteger := IdUsuario;
    qryMarca.ParamByName('DtCadastro').AsDateTime := DtCadastro;
    qryMarca.ParamByName('SnSituacao').AsInteger := SnSituacao;
    qryMarca.ParamByName('NmMarca').AsString := NmMarca;
   try
      qryMarca.ExecSQL;
      qryMarca.Close;
      Result := True;
    except
      Result := False;
    end;
  finally
    FreeAndNil(qryMarca)
  end;
end;

class function TMarca.Inativar(ASQLConnection: TFDConnection; AIdMarca: Integer): Boolean;
var
  qryMarca: TFDQuery;
begin
  qryMarca:= TFDQuery.Create(Nil);
  try
    qryMarca.Connection := ASQLConnection;
    qryMarca.SQL.Add('Update Marca Set ');
    qryMarca.SQL.Add('  SnSituacao = 0 ');
    qryMarca.SQL.Add('Where 1 = 1');
    qryMarca.SQL.Add('  And IdMarca = ' + IntToStr(AIdMarca));
   try
      qryMarca.ExecSQL;
      qryMarca.Close;
      Result := True;
    except
      Result := False;
    end;
  finally
    FreeAndNil(qryMarca)
  end;
end;

class function TMarca.Existe(ASQLConnection: TFDConnection; AIdMarca: Integer): Boolean;
var
  qryMarca: TFDQuery;
begin
  Result := False;
  qryMarca:= TFDQuery.Create(Nil);
  try
    qryMarca.Connection := ASQLConnection;
    qryMarca.SQL.Add('Select IdMarca From Marca');
    qryMarca.SQL.Add('Where 1 = 1');
    qryMarca.SQL.Add('  And IdMarca = ' + IntToStr(AIdMarca));
    qryMarca.Open;
    if qryMarca.Fields[0].Value > 0 then
      Result := True;
    qryMarca.Close;
  finally
    FreeAndNil(qryMarca)
  end;
end;

class function TMarca.BuscaMaxId(ASQLConnection: TFDConnection): Integer;
var
  qryMarca: TFDQuery;
begin
  Result := 0;
  qryMarca:= TFDQuery.Create(Nil);
  try
    qryMarca.Connection := ASQLConnection;
    qryMarca.SQL.Add('Select Max(IdMarca) As IdMarca From Marca');
    qryMarca.Open;

    if qryMarca.FieldByName('IdMarca').AsInteger > 0 then
      Result := qryMarca.FieldByName('IdMarca').AsInteger;
    qryMarca.Close;
  finally
    FreeAndNil(qryMarca)
  end;
end;

function TMarca.Buscar(ASQLConnection: TFDConnection; AIdMarca: Integer): Boolean;
var
  qryMarca: TFDQuery;
begin
  Result := False;
  qryMarca:= TFDQuery.Create(Nil);
  try
    qryMarca.Connection := ASQLConnection;
    qryMarca.SQL.Add('Select * From Marca');
    qryMarca.SQL.Add('Where 1 = 1');
    if AIdEmpresa > 0 then
    begin
      qryMarca.SQL.Add('  And IdMarca = ' + IntToStr(AIdMarca));
    end;

    qryMarca.Open;
    if not qryMarca.IsEmpty then
    begin
      Result := True;
      IdMarca := qryMarca.FieldByName('IdMarca').AsInteger;
      IdUsuario := qryMarca.FieldByName('IdUsuario').AsInteger;
      DtCadastro := qryMarca.FieldByName('DtCadastro').AsDateTime;
      if qryMarca.FieldByName('SnSituacao').AsBoolean then
      begin
        SnSituacao := 1
      end else begin
        SnSituacao := 0
      end;
      NmMarca := qryMarca.FieldByName('NmMarca').AsString;
    end;
    qryMarca.Close;
  finally
    FreeAndNil(qryMarca)
  end;
end;

end.

