unit uUsuario;

interface

uses Windows, TLHelp32, Forms, Controls, DateUtils, WinInet, MaskUtils, StdCtrls, Variants, DbTables, SysUtils, Classes, Contnrs, FireDAC.Stan.Intf, FireDAC.Stan.Option,
     FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
     Datasnap.DBClient, FireDAC.UI.Intf, FireDAC.VCLUI.Wait, FireDAC.Comp.UI;

type
  TUsuario = class
  private
    SQLConnection      		   : TFDConnection;
    FIdUsuario: Integer;
    FDtCadastro: TDateTime;
    FSnSituacao: Integer;
    FNmUsuario: String;
    FNrCpf: String;
    FNmLogin: String;
    FNmSenha: Byte;
    FSnAdministrador: Integer;
    procedure Inicializar;
  public
    property IdUsuario: Integer read FIdUsuario write FIdUsuario;
    property DtCadastro: TDateTime read FDtCadastro write FDtCadastro;
    property SnSituacao: Integer read FSnSituacao write FSnSituacao;
    property NmUsuario: String read FNmUsuario write FNmUsuario;
    property NrCpf: String read FNrCpf write FNrCpf;
    property NmLogin: String read FNmLogin write FNmLogin;
    property NmSenha: Byte read FNmSenha write FNmSenha;
    property SnAdministrador: Integer read FSnAdministrador write FSnAdministrador;
    constructor Create;
    function Salvar(ASQLConnection: TFDConnection): Boolean;
    class function Inativar(ASQLConnection: TFDConnection; AIdUsuario: Integer): Boolean;
    class function Existe(ASQLConnection: TFDConnection; AIdUsuario: Integer): Boolean;
    function Buscar(ASQLConnection: TFDConnection; AIdUsuario: Integer): Boolean;
    class function BuscaMaxId(ASQLConnection: TFDConnection): Integer;
    procedure CarregaDbGrid(ASQLConnection: TFDConnection; ISnSituacao: Integer; AIdUsuario: Integer; AConsulta: String; Data: TClientDataSet);
  end;

implementation

uses uFuncao, dPrincipal, uMensagem, uLog, uProcedure, dRelatorios, fProcessando;

procedure TUsuario.CarregaDbGrid(ASQLConnection: TFDConnection; ISnSituacao: Integer; AIdUsuario: Integer; AConsulta: String; Data: TClientDataSet);
var
  qryUsuario : TFDQuery;
  I            : Integer;
  lCampo       : TField;
  lCondicao    : String;
  lVerificacao : Integer;
  lFinalizaLoop: Integer;
begin
  lVerificacao := 0;
  lFinalizaLoop:= 0;

  qryUsuario := TFDQuery.Create(nil);
  try
    qryUsuario.Connection := ASQLConnection;

    if Data.FieldCount = 0 then
    begin
      Data.FieldDefs.Add('IdUsuario', ftInteger);
      Data.FieldDefs.Add('DtCadastro', ftDateTime);
      Data.FieldDefs.Add('SnSituacao', ftString, 7, False);
      Data.FieldDefs.Add('NmUsuario', ftString, 10, False);
      Data.FieldDefs.Add('NrCpf', ftString, 10, False);
      Data.FieldDefs.Add('NmLogin', ftString, 10, False);
      Data.FieldDefs.Add('NmSenha', ftByte);
      Data.FieldDefs.Add('SnAdministrador', ftInteger);
      Data.CreateDataSet;
    end;

    Data.EmptyDataSet;
    Data.DisableControls;

    for I := 0 to Data.FieldCount -1 do
    begin
      lCampo := Data.Fields[I];

      qryUsuario.Params.Clear;
      qryUsuario.SQL.Clear;
      qryUsuario.SQL.Add('Select');
      qryUsuario.SQL.Add('  IdUsuario,');
      qryUsuario.SQL.Add('  DtCadastro,');
      qryUsuario.SQL.Add('  SnSituacao,');
      qryUsuario.SQL.Add('  NmUsuario,');
      qryUsuario.SQL.Add('  NrCpf,');
      qryUsuario.SQL.Add('  NmLogin,');
      qryUsuario.SQL.Add('  NmSenha,');
      qryUsuario.SQL.Add('  SnAdministrador');
      qryUsuario.SQL.Add('From Usuario');
      qryUsuario.SQL.Add('Where 1 = 1');
      if ISnSituacao = 1 then
      begin
         qryUsuario.SQL.Add('  And SnSituacao = 1');
      end
      else
      if ISnSituacao = 0 then
      begin
         qryUsuario.SQL.Add('  And SnSituacao = 0');
      end;

      if Trim(AConsulta) <> '' then
      begin
        if PermitePesquisa(lCampo, AConsulta) then
        begin
          if lCampo.DataType in [ftString] then
          begin
            lCondicao := ' And ' + lCampo.FieldName + ' Like ' + QuotedStr('%' + AConsulta + '%');
          end else if lCampo.DataType in [ftInteger] then
          begin
            lCondicao := ' And ' + lCampo.FieldName + ' = ' + AConsulta;
          end;
          qryUsuario.SQL.Add (lCondicao);
          qryUsuario.SQL.Add ('Order By');
          qryUsuario.SQL.Add ('  IdUsuario');

          qryUsuario.Open;
          qryUsuario.First;
        end;
      end else begin
        qryUsuario.SQL.Add (lCondicao);
        qryUsuario.SQL.Add ('Order By');
        qryUsuario.SQL.Add ('  IdUsuario');

        lFinalizaLoop := 1;
        qryUsuario.Open;
        qryUsuario.First;
      end;

      while not qryUsuario.Eof do
      begin
        if Trim(AConsulta) <> '' then
        begin
          if not Data.IsEmpty then
          begin
            Data.First;
            while not Data.Eof do
            begin
              if Data.FieldByName('IdUsuario').AsInteger = qryUsuario.FieldByName('IdUsuario').AsInteger then
              begin
                lVerificacao := 1;
              end;
              Data.Next
            end;
          end;
        end;
        if lVerificacao = 0 then
        begin
          Data.Append;
          Data.FieldByName('IdUsuario').AsInteger := qryUsuario.FieldByName('IdUsuario').AsInteger;
          Data.FieldByName('DtCadastro').AsDateTime := qryUsuario.FieldByName('DtCadastro').AsDateTime;
          if qryUsuario.FieldByName('SnSituacao').AsBoolean then
          begin
            Data.FieldByName('SnSituacao').AsString  := 'Ativo';
          end else begin
            Data.FieldByName('SnSituacao').AsString  := 'Desativado';
          end;
          Data.FieldByName('NmUsuario').AsString := qryUsuario.FieldByName('NmUsuario').AsString;
          Data.FieldByName('NrCpf').AsString := qryUsuario.FieldByName('NrCpf').AsString;
          Data.FieldByName('NmLogin').AsString := qryUsuario.FieldByName('NmLogin').AsString;
          Data.FieldByName('NmSenha').AsVariant := qryUsuario.FieldByName('NmSenha').AsVariant;
          Data.FieldByName('SnAdministrador').AsInteger := qryUsuario.FieldByName('SnAdministrador').AsInteger;
          Data.Post;
        end;

        lVerificacao := 0;
        qryUsuario.Next;
      end;
      if lFinalizaLoop = 1 then
      begin
        Break;
      end;
    end;
  finally
    qryUsuario.FreeOnRelease;
    Data.EnableControls;
    Data.First;
  end;
end;

constructor TUsuario.Create;
begin
  Inicializar;
end;

procedure TUsuario.Inicializar;
begin
  IdUsuario := 0;
  DtCadastro := 0;
  SnSituacao := 0;
  NmUsuario := '';
  NrCpf := '';
  NmLogin := '';
  NmSenha := 0;
  SnAdministrador := 0;
end;

function TUsuario.Salvar(ASQLConnection: TFDConnection): Boolean;
var
 qryUsuario: TFDQuery;
begin
  qryUsuario:= TFDQuery.Create(Nil);
  try
    qryUsuario.Connection := ASQLConnection;
    if not Existe(ASQLConnection, IdUsuario) then
    begin
      qryUsuario.SQL.Add('Insert Into Usuario(');
      qryUsuario.SQL.Add('  DtCadastro,');
      qryUsuario.SQL.Add('  SnSituacao,');
      qryUsuario.SQL.Add('  NmUsuario,');
      qryUsuario.SQL.Add('  NrCpf,');
      qryUsuario.SQL.Add('  NmLogin,');
      qryUsuario.SQL.Add('  NmSenha,');
      qryUsuario.SQL.Add('  SnAdministrador)');
      qryUsuario.SQL.Add('Values (');
      qryUsuario.SQL.Add('  :DtCadastro,');
      qryUsuario.SQL.Add('  :SnSituacao,');
      qryUsuario.SQL.Add('  :NmUsuario,');
      qryUsuario.SQL.Add('  :NrCpf,');
      qryUsuario.SQL.Add('  :NmLogin,');
      qryUsuario.SQL.Add('  :NmSenha,');
      qryUsuario.SQL.Add('  :SnAdministrador)');
    end else begin
      qryUsuario.SQL.Add('Update Usuario Set ');
      qryUsuario.SQL.Add('  DtCadastro = :DtCadastro,');
      qryUsuario.SQL.Add('  SnSituacao = :SnSituacao,');
      qryUsuario.SQL.Add('  NmUsuario = :NmUsuario,');
      qryUsuario.SQL.Add('  NrCpf = :NrCpf,');
      qryUsuario.SQL.Add('  NmLogin = :NmLogin,');
      qryUsuario.SQL.Add('  NmSenha = :NmSenha,');
      qryUsuario.SQL.Add('  SnAdministrador = :SnAdministrador ');
      qryUsuario.SQL.Add('Where IdUsuario = :IdUsuario');

      qryUsuario.ParamByName('IdUsuario').AsInteger := IdUsuario;

    end;
    qryUsuario.ParamByName('DtCadastro').AsDateTime := DtCadastro;
    qryUsuario.ParamByName('SnSituacao').AsInteger := SnSituacao;
    qryUsuario.ParamByName('NmUsuario').AsString := NmUsuario;
    qryUsuario.ParamByName('NrCpf').AsString := NrCpf;
    qryUsuario.ParamByName('NmLogin').AsString := NmLogin;
    qryUsuario.ParamByName('NmSenha').AsByte := NmSenha;
    qryUsuario.ParamByName('SnAdministrador').AsInteger := SnAdministrador;
   try
      qryUsuario.ExecSQL;
      qryUsuario.Close;
      Result := True;
    except
      Result := False;
    end;
  finally
    FreeAndNil(qryUsuario)
  end;
end;

class function TUsuario.Inativar(ASQLConnection: TFDConnection; AIdUsuario: Integer): Boolean;
var
  qryUsuario: TFDQuery;
begin
  qryUsuario:= TFDQuery.Create(Nil);
  try
    qryUsuario.Connection := ASQLConnection;
    qryUsuario.SQL.Add('Update Usuario Set ');
    qryUsuario.SQL.Add('  SnSituacao = 0 ');
    qryUsuario.SQL.Add('Where 1 = 1');
    qryUsuario.SQL.Add('  And IdUsuario = ' + IntToStr(AIdUsuario));
   try
      qryUsuario.ExecSQL;
      qryUsuario.Close;
      Result := True;
    except
      Result := False;
    end;
  finally
    FreeAndNil(qryUsuario)
  end;
end;

class function TUsuario.Existe(ASQLConnection: TFDConnection; AIdUsuario: Integer): Boolean;
var
  qryUsuario: TFDQuery;
begin
  Result := False;
  qryUsuario:= TFDQuery.Create(Nil);
  try
    qryUsuario.Connection := ASQLConnection;
    qryUsuario.SQL.Add('Select IdUsuario From Usuario');
    qryUsuario.SQL.Add('Where 1 = 1');
    qryUsuario.SQL.Add('  And IdUsuario = ' + IntToStr(AIdUsuario));
    qryUsuario.Open;
    if qryUsuario.Fields[0].Value > 0 then
      Result := True;
    qryUsuario.Close;
  finally
    FreeAndNil(qryUsuario)
  end;
end;

class function TUsuario.BuscaMaxId(ASQLConnection: TFDConnection): Integer;
var
  qryUsuario: TFDQuery;
begin
  Result := 0;
  qryUsuario:= TFDQuery.Create(Nil);
  try
    qryUsuario.Connection := ASQLConnection;
    qryUsuario.SQL.Add('Select Max(IdUsuario) As IdUsuario From Usuario');
    qryUsuario.Open;

    if qryUsuario.FieldByName('IdUsuario').AsInteger > 0 then
      Result := qryUsuario.FieldByName('IdUsuario').AsInteger;
    qryUsuario.Close;
  finally
    FreeAndNil(qryUsuario)
  end;
end;

function TUsuario.Buscar(ASQLConnection: TFDConnection; AIdUsuario: Integer): Boolean;
var
  qryUsuario: TFDQuery;
begin
  Result := False;
  qryUsuario:= TFDQuery.Create(Nil);
  try
    qryUsuario.Connection := ASQLConnection;
    qryUsuario.SQL.Add('Select * From Usuario');
    qryUsuario.SQL.Add('Where 1 = 1');
    if AIdEmpresa > 0 then
    begin
      qryUsuario.SQL.Add('  And IdUsuario = ' + IntToStr(AIdUsuario));
    end;

    qryUsuario.Open;
    if not qryUsuario.IsEmpty then
    begin
      Result := True;
      IdUsuario := qryUsuario.FieldByName('IdUsuario').AsInteger;
      DtCadastro := qryUsuario.FieldByName('DtCadastro').AsDateTime;
      if qryUsuario.FieldByName('SnSituacao').AsBoolean then
      begin
        SnSituacao := 1
      end else begin
        SnSituacao := 0
      end;
      NmUsuario := qryUsuario.FieldByName('NmUsuario').AsString;
      NrCpf := qryUsuario.FieldByName('NrCpf').AsString;
      NmLogin := qryUsuario.FieldByName('NmLogin').AsString;
      NmSenha := qryUsuario.FieldByName('NmSenha').AsByte;
      SnAdministrador := qryUsuario.FieldByName('SnAdministrador').AsInteger;
    end;
    qryUsuario.Close;
  finally
    FreeAndNil(qryUsuario)
  end;
end;

end.

