unit uConfiguracao;

interface

uses Windows, TLHelp32, Forms, Controls, DateUtils, WinInet, MaskUtils, StdCtrls, Variants, DbTables, SysUtils, Classes, Contnrs, FireDAC.Stan.Intf, FireDAC.Stan.Option,
     FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
     Datasnap.DBClient, FireDAC.UI.Intf, FireDAC.VCLUI.Wait, FireDAC.Comp.UI;

type
  TConfiguracao = class
  private
    SQLConnection      		   : TFDConnection;
    FIdConfiguracao: Integer;
    FIdUsuario: Integer;
    FDtCadastro: TDateTime;
    FSnSituacao: Integer;
    FNmSigla: String;
    FNmConfiguracao: String;
    FNmValor: String;
    procedure Inicializar;
  public
    property IdConfiguracao: Integer read FIdConfiguracao write FIdConfiguracao;
    property IdUsuario: Integer read FIdUsuario write FIdUsuario;
    property DtCadastro: TDateTime read FDtCadastro write FDtCadastro;
    property SnSituacao: Integer read FSnSituacao write FSnSituacao;
    property NmSigla: String read FNmSigla write FNmSigla;
    property NmConfiguracao: String read FNmConfiguracao write FNmConfiguracao;
    property NmValor: String read FNmValor write FNmValor;
    constructor Create;
    function Salvar(ASQLConnection: TFDConnection): Boolean;
    class function Inativar(ASQLConnection: TFDConnection; ANmSigla: String): Boolean;
    class function Existe(ASQLConnection: TFDConnection; ANmSigla: String): Boolean;
    function Buscar(ASQLConnection: TFDConnection; ANmSigla: String): Boolean;
    class function BuscaMaxId(ASQLConnection: TFDConnection): Integer;
    procedure CarregaDbGrid(ASQLConnection: TFDConnection; ISnSituacao: Integer; ANmSigla: String; AConsulta: String; Data: TClientDataSet);
  end;

implementation

uses uFuncao, dPrincipal, uMensagem, uLog, uProcedure, dRelatorios, fProcessando;

procedure TConfiguracao.CarregaDbGrid(ASQLConnection: TFDConnection; ISnSituacao: Integer; ANmSigla: String; AConsulta: String; Data: TClientDataSet);
var
  qryConfiguracao : TFDQuery;
  I            : Integer;
  lCampo       : TField;
  lCondicao    : String;
  lVerificacao : Integer;
  lFinalizaLoop: Integer;
begin
  lVerificacao := 0;
  lFinalizaLoop:= 0;

  qryConfiguracao := TFDQuery.Create(nil);
  try
    qryConfiguracao.Connection := ASQLConnection;

    if Data.FieldCount = 0 then
    begin
      Data.FieldDefs.Add('IdConfiguracao', ftInteger);
      Data.FieldDefs.Add('IdUsuario', ftInteger);
      Data.FieldDefs.Add('DtCadastro', ftDateTime);
      Data.FieldDefs.Add('SnSituacao', ftString, 7, False);
      Data.FieldDefs.Add('NmSigla', ftString, 10, False);
      Data.FieldDefs.Add('NmConfiguracao', ftString, 10, False);
      Data.FieldDefs.Add('NmValor', ftString, 10, False);
      Data.CreateDataSet;
    end;

    Data.EmptyDataSet;
    Data.DisableControls;

    for I := 0 to Data.FieldCount -1 do
    begin
      lCampo := Data.Fields[I];

      qryConfiguracao.Params.Clear;
      qryConfiguracao.SQL.Clear;
      qryConfiguracao.SQL.Add('Select');
      qryConfiguracao.SQL.Add('  IdConfiguracao,');
      qryConfiguracao.SQL.Add('  IdUsuario,');
      qryConfiguracao.SQL.Add('  DtCadastro,');
      qryConfiguracao.SQL.Add('  SnSituacao,');
      qryConfiguracao.SQL.Add('  NmSigla,');
      qryConfiguracao.SQL.Add('  NmConfiguracao,');
      qryConfiguracao.SQL.Add('  NmValor');
      qryConfiguracao.SQL.Add('From Configuracao');
      qryConfiguracao.SQL.Add('Where 1 = 1');
      if ISnSituacao = 1 then
      begin
         qryConfiguracao.SQL.Add('  And SnSituacao = 1');
      end
      else
      if ISnSituacao = 0 then
      begin
         qryConfiguracao.SQL.Add('  And SnSituacao = 0');
      end;

      if Trim(AConsulta) <> '' then
      begin
        if PermitePesquisa(lCampo, AConsulta) then
        begin
          if lCampo.DataType in [ftString] then
          begin
            lCondicao := ' And ' + lCampo.FieldName + ' Like ' + QuotedStr('%' + AConsulta + '%');
          end else if lCampo.DataType in [ftInteger] then
          begin
            lCondicao := ' And ' + lCampo.FieldName + ' = ' + AConsulta;
          end;
          qryConfiguracao.SQL.Add (lCondicao);
          qryConfiguracao.SQL.Add ('Order By');
          qryConfiguracao.SQL.Add ('  IdConfiguracao');

          qryConfiguracao.Open;
          qryConfiguracao.First;
        end;
      end else begin
        qryConfiguracao.SQL.Add (lCondicao);
        qryConfiguracao.SQL.Add ('Order By');
        qryConfiguracao.SQL.Add ('  IdConfiguracao');

        lFinalizaLoop := 1;
        qryConfiguracao.Open;
        qryConfiguracao.First;
      end;

      while not qryConfiguracao.Eof do
      begin
        if Trim(AConsulta) <> '' then
        begin
          if not Data.IsEmpty then
          begin
            Data.First;
            while not Data.Eof do
            begin
              if Data.FieldByName('IdConfiguracao').AsInteger = qryConfiguracao.FieldByName('IdConfiguracao').AsInteger then
              begin
                lVerificacao := 1;
              end;
              Data.Next
            end;
          end;
        end;
        if lVerificacao = 0 then
        begin
          Data.Append;
          Data.FieldByName('IdConfiguracao').AsInteger := qryConfiguracao.FieldByName('IdConfiguracao').AsInteger;
          Data.FieldByName('IdUsuario').AsInteger := qryConfiguracao.FieldByName('IdUsuario').AsInteger;
          Data.FieldByName('DtCadastro').AsDateTime := qryConfiguracao.FieldByName('DtCadastro').AsDateTime;
          if qryConfiguracao.FieldByName('SnSituacao').AsBoolean then
          begin
            Data.FieldByName('SnSituacao').AsString  := 'Ativo';
          end else begin
            Data.FieldByName('SnSituacao').AsString  := 'Desativado';
          end;
          Data.FieldByName('NmSigla').AsString := qryConfiguracao.FieldByName('NmSigla').AsString;
          Data.FieldByName('NmConfiguracao').AsString := qryConfiguracao.FieldByName('NmConfiguracao').AsString;
          Data.FieldByName('NmValor').AsString := qryConfiguracao.FieldByName('NmValor').AsString;
          Data.Post;
        end;

        lVerificacao := 0;
        qryConfiguracao.Next;
      end;
      if lFinalizaLoop = 1 then
      begin
        Break;
      end;
    end;
  finally
    qryConfiguracao.FreeOnRelease;
    Data.EnableControls;
    Data.First;
  end;
end;

constructor TConfiguracao.Create;
begin
  Inicializar;
end;

procedure TConfiguracao.Inicializar;
begin
  IdConfiguracao := 0;
  IdUsuario := 0;
  DtCadastro := 0;
  SnSituacao := 0;
  NmSigla := '';
  NmConfiguracao := '';
  NmValor := '';
end;

function TConfiguracao.Salvar(ASQLConnection: TFDConnection): Boolean;
var
 qryConfiguracao: TFDQuery;
begin
  qryConfiguracao:= TFDQuery.Create(Nil);
  try
    qryConfiguracao.Connection := ASQLConnection;
    if not Existe(ASQLConnection, NmSigla) then
    begin
      qryConfiguracao.SQL.Add('Insert Into Configuracao(');
      qryConfiguracao.SQL.Add('  IdUsuario,');
      qryConfiguracao.SQL.Add('  DtCadastro,');
      qryConfiguracao.SQL.Add('  SnSituacao,');
      qryConfiguracao.SQL.Add('  NmSigla,');
      qryConfiguracao.SQL.Add('  NmConfiguracao,');
      qryConfiguracao.SQL.Add('  NmValor)');
      qryConfiguracao.SQL.Add('Values (');
      qryConfiguracao.SQL.Add('  :IdUsuario,');
      qryConfiguracao.SQL.Add('  :DtCadastro,');
      qryConfiguracao.SQL.Add('  :SnSituacao,');
      qryConfiguracao.SQL.Add('  :NmSigla,');
      qryConfiguracao.SQL.Add('  :NmConfiguracao,');
      qryConfiguracao.SQL.Add('  :NmValor)');
    end else begin
      qryConfiguracao.SQL.Add('Update Configuracao Set ');
      qryConfiguracao.SQL.Add('  IdUsuario = :IdUsuario,');
      qryConfiguracao.SQL.Add('  DtCadastro = :DtCadastro,');
      qryConfiguracao.SQL.Add('  SnSituacao = :SnSituacao,');
      qryConfiguracao.SQL.Add('  NmConfiguracao = :NmConfiguracao,');
      qryConfiguracao.SQL.Add('  NmValor = :NmValor ');
      qryConfiguracao.SQL.Add('Where NmSigla = :NmSigla');

      qryConfiguracao.ParamByName('NmSigla').AsString := NmSigla;

    end;
    qryConfiguracao.ParamByName('IdUsuario').AsInteger := IdUsuario;
    qryConfiguracao.ParamByName('DtCadastro').AsDateTime := DtCadastro;
    qryConfiguracao.ParamByName('SnSituacao').AsInteger := SnSituacao;
    qryConfiguracao.ParamByName('NmSigla').AsString := NmSigla;
    qryConfiguracao.ParamByName('NmConfiguracao').AsString := NmConfiguracao;
    qryConfiguracao.ParamByName('NmValor').AsString := NmValor;
   try
      qryConfiguracao.ExecSQL;
      qryConfiguracao.Close;
      Result := True;
    except
      Result := False;
    end;
  finally
    FreeAndNil(qryConfiguracao)
  end;
end;

class function TConfiguracao.Inativar(ASQLConnection: TFDConnection; ANmSigla: String): Boolean;
var
  qryConfiguracao: TFDQuery;
begin
  qryConfiguracao:= TFDQuery.Create(Nil);
  try
    qryConfiguracao.Connection := ASQLConnection;
    qryConfiguracao.SQL.Add('Update Configuracao Set ');
    qryConfiguracao.SQL.Add('  SnSituacao = 0 ');
    qryConfiguracao.SQL.Add('Where 1 = 1');
    qryConfiguracao.SQL.Add('Where NmSigla = ' + QuotedStr(ANmSigla));
   try
      qryConfiguracao.ExecSQL;
      qryConfiguracao.Close;
      Result := True;
    except
      Result := False;
    end;
  finally
    FreeAndNil(qryConfiguracao)
  end;
end;

class function TConfiguracao.Existe(ASQLConnection: TFDConnection; ANmSigla: String): Boolean;
var
  qryConfiguracao: TFDQuery;
begin
  Result := False;
  qryConfiguracao:= TFDQuery.Create(Nil);
  try
    qryConfiguracao.Connection := ASQLConnection;
    qryConfiguracao.SQL.Add('Select IdConfiguracao From Configuracao');
    qryConfiguracao.SQL.Add('Where 1 = 1');
    qryConfiguracao.SQL.Add('Where NmSigla = ' + QuotedStr(ANmSigla));
    qryConfiguracao.Open;
    if qryConfiguracao.Fields[0].Value > 0 then
      Result := True;
    qryConfiguracao.Close;
  finally
    FreeAndNil(qryConfiguracao)
  end;
end;

class function TConfiguracao.BuscaMaxId(ASQLConnection: TFDConnection): Integer;
var
  qryConfiguracao: TFDQuery;
begin
  Result := 0;
  qryConfiguracao:= TFDQuery.Create(Nil);
  try
    qryConfiguracao.Connection := ASQLConnection;
    qryConfiguracao.SQL.Add('Select Max(IdConfiguracao) As IdConfiguracao From Configuracao');
    qryConfiguracao.Open;

    if qryConfiguracao.FieldByName('IdConfiguracao').AsInteger > 0 then
      Result := qryConfiguracao.FieldByName('IdConfiguracao').AsInteger;
    qryConfiguracao.Close;
  finally
    FreeAndNil(qryConfiguracao)
  end;
end;

function TConfiguracao.Buscar(ASQLConnection: TFDConnection; ANmSigla: String): Boolean;
var
  qryConfiguracao: TFDQuery;
begin
  Result := False;
  qryConfiguracao:= TFDQuery.Create(Nil);
  try
    qryConfiguracao.Connection := ASQLConnection;
    qryConfiguracao.SQL.Add('Select * From Configuracao');
    qryConfiguracao.SQL.Add('Where 1 = 1');
    if AIdEmpresa > 0 then
    begin
      qryConfiguracao.SQL.Add('Where NmSigla = ' + QuotedStr(ANmSigla));
    end;
    qryConfiguracao.SQL.Add('  And NmSigla = ' + QuotedStr(ANmSigla));

    qryConfiguracao.Open;
    if not qryConfiguracao.IsEmpty then
    begin
      Result := True;
      IdConfiguracao := qryConfiguracao.FieldByName('IdConfiguracao').AsInteger;
      IdUsuario := qryConfiguracao.FieldByName('IdUsuario').AsInteger;
      DtCadastro := qryConfiguracao.FieldByName('DtCadastro').AsDateTime;
      if qryConfiguracao.FieldByName('SnSituacao').AsBoolean then
      begin
        SnSituacao := 1
      end else begin
        SnSituacao := 0
      end;
      NmSigla := qryConfiguracao.FieldByName('NmSigla').AsString;
      NmConfiguracao := qryConfiguracao.FieldByName('NmConfiguracao').AsString;
      NmValor := qryConfiguracao.FieldByName('NmValor').AsString;
    end;
    qryConfiguracao.Close;
  finally
    FreeAndNil(qryConfiguracao)
  end;
end;

end.

