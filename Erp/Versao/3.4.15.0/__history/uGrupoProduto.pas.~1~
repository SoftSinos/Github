unit uGrupo;

interface

uses Windows, TLHelp32, Forms, Controls, DateUtils, WinInet, MaskUtils, StdCtrls, Variants, DbTables, SysUtils, Classes, Contnrs, FireDAC.Stan.Intf, FireDAC.Stan.Option,
     FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
     Datasnap.DBClient, FireDAC.UI.Intf, FireDAC.VCLUI.Wait, FireDAC.Comp.UI;

type
  TGrupo = class
  private
    FIdGrupo: Integer;
    FIdUsuario: Integer;
    FDtCadastro: TDateTime;
    FSnSituacao: Integer;
    FNmGrupo: String;
    FNmUsuarioCadastro: String;
    procedure Inicializar;
  public
    property IdGrupo: Integer read FIdGrupo write FIdGrupo;
    property IdUsuario: Integer read FIdUsuario write FIdUsuario;
    property DtCadastro: TDateTime read FDtCadastro write FDtCadastro;
    property SnSituacao: Integer read FSnSituacao write FSnSituacao;
    property NmGrupo: String read FNmGrupo write FNmGrupo;
    property NmUsuarioCadastro: String read FNmUsuarioCadastro write FNmUsuarioCadastro;
    constructor Create;
    function Salvar(ASQLConnection: TFDConnection): Boolean;
    class function Inativar(ASQLConnection: TFDConnection; AIdGrupo: Integer): Boolean;
    class function Existe(ASQLConnection: TFDConnection; AIdGrupo: Integer): Boolean;
    function Buscar(ASQLConnection: TFDConnection; AIdGrupo: Integer): Boolean;
    class function BuscaMaxId(ASQLConnection: TFDConnection): Integer;
    procedure CarregaDbGrid(ASQLConnection: TFDConnection; ISnSituacao: Integer; AIdGrupo: Integer; AConsulta: String; Data: TClientDataSet);
  end;

implementation

uses uFuncao, dPrincipal, uMensagem, uLog, uProcedure, dRelatorios, fProcessando;

procedure TGrupo.CarregaDbGrid(ASQLConnection: TFDConnection; ISnSituacao: Integer; AIdGrupo: Integer; AConsulta: String; Data: TClientDataSet);
var
  qryGrupo : TFDQuery;
  I            : Integer;
  lCampo       : TField;
  lCondicao    : String;
  lVerificacao : Integer;
  lFinalizaLoop: Integer;
begin
  lVerificacao := 0;
  lFinalizaLoop:= 0;

  qryGrupo := TFDQuery.Create(nil);
  try
    qryGrupo.Connection := ASQLConnection;

    if Data.FieldCount = 0 then
    begin
      Data.FieldDefs.Add('IdGrupo', ftInteger);
      Data.FieldDefs.Add('IdUsuario', ftInteger);
      Data.FieldDefs.Add('DtCadastro', ftDateTime);
      Data.FieldDefs.Add('SnSituacao', ftString, 9, False);
      Data.FieldDefs.Add('NmGrupo', ftString, 255, False);
      Data.FieldDefs.Add('NmUsuarioCadastro', ftString, 255, False);
      Data.CreateDataSet;
    end;

    Data.EmptyDataSet;
    Data.DisableControls;

    for I := 0 to Data.FieldCount -1 do
    begin
      lCampo := Data.Fields[I];

      qryGrupo.Params.Clear;
      qryGrupo.SQL.Clear;
      qryGrupo.SQL.Add('Select');
      qryGrupo.SQL.Add('  *');
      qryGrupo.SQL.Add('From VW_GridGrupo');
      qryGrupo.SQL.Add('Where 1 = 1');

      if ISnSituacao = 1 then
      begin
         qryGrupo.SQL.Add('  And SnSituacao = 1');
      end
      else
      if ISnSituacao = 0 then
      begin
         qryGrupo.SQL.Add('  And SnSituacao = 0');
      end;

      if AIdGrupo > 0 then
      begin
        qryGrupo.SQL.Add('  And IdGrupo = :IdGrupo');

        qryGrupo.ParamByName('IdGrupo').AsInteger := AIdGrupo
      end;

      if Trim(AConsulta) <> '' then
      begin
        if PermitePesquisa(lCampo, AConsulta) then
        begin
          if lCampo.DataType in [ftString] then
          begin
            lCondicao := ' And ' + lCampo.FieldName + ' Like ' + QuotedStr('%' + AConsulta + '%');
          end else if lCampo.DataType in [ftInteger] then
          begin
            lCondicao := ' And ' + lCampo.FieldName + ' = ' + AConsulta;
          end;
          qryGrupo.SQL.Add (lCondicao);
          qryGrupo.SQL.Add ('Order By');
          qryGrupo.SQL.Add (' IdGrupo');

          qryGrupo.Open;
          qryGrupo.First;
        end;
      end else begin
        qryGrupo.SQL.Add (lCondicao);
        qryGrupo.SQL.Add ('Order By');
        qryGrupo.SQL.Add (' IdGrupo');

        lFinalizaLoop := 1;
        qryGrupo.Open;
        qryGrupo.First;
      end;

      while not qryGrupo.Eof do
      begin
        if Trim(AConsulta) <> '' then
        begin
          if not Data.IsEmpty then
          begin
            Data.First;
            while not Data.Eof do
            begin
              if Data.FieldByName('IdGrupo').AsInteger = qryGrupo.FieldByName('IdGrupo').AsInteger then
              begin
                lVerificacao := 1;
              end;
              Data.Next
            end;
          end;
        end;
        if lVerificacao = 0 then
        begin
          Data.Append;
          Data.FieldByName('IdGrupo').AsInteger := qryGrupo.FieldByName('IdGrupo').AsInteger;
          Data.FieldByName('IdUsuario').AsInteger := qryGrupo.FieldByName('IdUsuario').AsInteger;
          Data.FieldByName('DtCadastro').AsDateTime := qryGrupo.FieldByName('DtCadastro').AsDateTime;
          if qryGrupo.FieldByName('SnSituacao').AsBoolean then
          begin
            Data.FieldByName('SnSituacao').AsString  := 'Ativo';
          end else begin
            Data.FieldByName('SnSituacao').AsString  := 'Inativo';
          end;
          Data.FieldByName('NmGrupo').AsString := qryGrupo.FieldByName('NmGrupo').AsString;
          Data.FieldByName('NmUsuarioCadastro').AsString := qryGrupo.FieldByName('NmUsuarioCadastro').AsString;
          Data.Post;
        end;

        lVerificacao := 0;
        qryGrupo.Next;
      end;
      if lFinalizaLoop = 1 then
      begin
        Break;
      end;
    end;
  finally
    qryGrupo.FreeOnRelease;
    Data.EnableControls;
    Data.First;
  end;
end;

constructor TGrupo.Create;
begin
  Inicializar;
end;

procedure TGrupo.Inicializar;
begin
  IdGrupo := 0;
  IdUsuario := 0;
  DtCadastro := 0;
  SnSituacao := 0;
  NmGrupo := '';
  NmUsuarioCadastro := '';
end;

function TGrupo.Salvar(ASQLConnection: TFDConnection): Boolean;
var
 qryGrupo: TFDQuery;
begin
  qryGrupo:= TFDQuery.Create(Nil);
  try
    qryGrupo.Connection := ASQLConnection;
    if not Existe(ASQLConnection, IdGrupo) then
    begin
      qryGrupo.SQL.Add('Insert Into Grupo(');
      qryGrupo.SQL.Add('  IdUsuario,');
      qryGrupo.SQL.Add('  DtCadastro,');
      qryGrupo.SQL.Add('  SnSituacao,');
      qryGrupo.SQL.Add('  NmGrupo)');
      qryGrupo.SQL.Add('Values (');
      qryGrupo.SQL.Add('  :IdUsuario,');
      qryGrupo.SQL.Add('  :DtCadastro,');
      qryGrupo.SQL.Add('  :SnSituacao,');
      qryGrupo.SQL.Add('  :NmGrupo)');
    end else begin
      qryGrupo.SQL.Add('Update Grupo Set ');
      qryGrupo.SQL.Add('  IdUsuario = :IdUsuario,');
      qryGrupo.SQL.Add('  DtCadastro = :DtCadastro,');
      qryGrupo.SQL.Add('  SnSituacao = :SnSituacao,');
      qryGrupo.SQL.Add('  NmGrupo = :NmGrupo ');
      qryGrupo.SQL.Add('Where IdGrupo = :IdGrupo');

      qryGrupo.ParamByName('IdGrupo').AsInteger := IdGrupo;

    end;
    qryGrupo.ParamByName('IdUsuario').AsInteger := IdUsuario;
    qryGrupo.ParamByName('DtCadastro').AsDateTime := DtCadastro;
    qryGrupo.ParamByName('SnSituacao').AsInteger := SnSituacao;
    qryGrupo.ParamByName('NmGrupo').AsString := NmGrupo;
   try
      qryGrupo.ExecSQL;
      qryGrupo.Close;
      Result := True;
    except
      Result := False;
    end;
  finally
    FreeAndNil(qryGrupo)
  end;
end;

class function TGrupo.Inativar(ASQLConnection: TFDConnection; AIdGrupo: Integer): Boolean;
var
  qryGrupo: TFDQuery;
begin
  qryGrupo:= TFDQuery.Create(Nil);
  try
    qryGrupo.Connection := ASQLConnection;
    qryGrupo.SQL.Add('Update Grupo Set ');
    qryGrupo.SQL.Add('  SnSituacao = 0 ');
    qryGrupo.SQL.Add('Where 1 = 1');
    qryGrupo.SQL.Add('  And IdGrupo = ' + IntToStr(AIdGrupo));
   try
      qryGrupo.ExecSQL;
      qryGrupo.Close;
      Result := True;
    except
      Result := False;
    end;
  finally
    FreeAndNil(qryGrupo)
  end;
end;

class function TGrupo.Existe(ASQLConnection: TFDConnection; AIdGrupo: Integer): Boolean;
var
  qryGrupo: TFDQuery;
begin
  Result := False;
  qryGrupo:= TFDQuery.Create(Nil);
  try
    qryGrupo.Connection := ASQLConnection;
    qryGrupo.SQL.Add('Select IdGrupo From Grupo');
    qryGrupo.SQL.Add('Where 1 = 1');
    qryGrupo.SQL.Add('  And IdGrupo = ' + IntToStr(AIdGrupo));
    qryGrupo.Open;
    if qryGrupo.Fields[0].Value > 0 then
      Result := True;
    qryGrupo.Close;
  finally
    FreeAndNil(qryGrupo)
  end;
end;

class function TGrupo.BuscaMaxId(ASQLConnection: TFDConnection): Integer;
var
  qryGrupo: TFDQuery;
begin
  Result := 0;
  qryGrupo:= TFDQuery.Create(Nil);
  try
    qryGrupo.Connection := ASQLConnection;
    qryGrupo.SQL.Add('Select Max(IdGrupo) As IdGrupo From Grupo');
    qryGrupo.Open;

    if qryGrupo.FieldByName('IdGrupo').AsInteger > 0 then
      Result := qryGrupo.FieldByName('IdGrupo').AsInteger;
    qryGrupo.Close;
  finally
    FreeAndNil(qryGrupo)
  end;
end;

function TGrupo.Buscar(ASQLConnection: TFDConnection; AIdGrupo: Integer): Boolean;
var
  qryGrupo: TFDQuery;
begin
  Result := False;
  qryGrupo:= TFDQuery.Create(Nil);
  try
    qryGrupo.Connection := ASQLConnection;
    qryGrupo.SQL.Add('Select * From VW_GridGrupo');
    qryGrupo.SQL.Add('Where IdGrupo = :IdGrupo');

    qryGrupo.ParamByName('IdGrupo').AsString := IntToStr(AIdGrupo);

    qryGrupo.Open;
    if not qryGrupo.IsEmpty then
    begin
      Result := True;
      IdGrupo := qryGrupo.FieldByName('IdGrupo').AsInteger;
      IdUsuario := qryGrupo.FieldByName('IdUsuario').AsInteger;
      DtCadastro := qryGrupo.FieldByName('DtCadastro').AsDateTime;
      if qryGrupo.FieldByName('SnSituacao').AsBoolean then
      begin
        SnSituacao := 1
      end else begin
        SnSituacao := 0
      end;
      NmGrupo := qryGrupo.FieldByName('NmGrupo').AsString;
      NmUsuarioCadastro := qryGrupo.FieldByName('NmUsuarioCadastro').AsString;
    end;
    qryGrupo.Close;
  finally
    FreeAndNil(qryGrupo)
  end;
end;

end.

